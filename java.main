// LC 454
class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
       HashMap<Integer, Integer> map = new HashMap<>();
       for(int i = 0; i < nums1.length; i++){
           for(int j = 0; j < nums2.length; j++){
               int key = nums1[i] + nums2[j];
               map.put(key, map.getOrDefault(key, 0) + 1);
           }
       } 
       int count = 0;
       for(int i = 0; i < nums3.length; i++){
           for(int j = 0; j < nums4.length; j++){
               int target = 0 - (nums3[i] + nums4[j]);
               count += map.getOrDefault(target, 0);
           }
       }
       return count;
    }
}
// Time: O(N ^ 2) Space: worst O(N ^ 2)

// LC 383
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] map = new int[26];
        for(int i = 0; i < magazine.length(); i++){
            map[magazine.charAt(i) - 'a'] ++;
        }
        for(int j = 0; j < ransomNote.length(); j++){
            if(map[ransomNote.charAt(j) - 'a']-- == 0){
                return false;
            }
        }
        return true;
    }
}
// Time: O(M), O(1)

// LC 15
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++){
            if(nums[i] > 0) return result;
            if(i > 0 && nums[i] == nums[i - 1]) continue;

            int left = i + 1;
            int right = nums.length - 1;
            while(left < right){
                int sum = nums[i] + nums[left] + nums[right];
                if(sum > 0) right --;
                else if(sum < 0) left ++;
                else{
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    while(left < right && nums[left] == nums[left + 1]) left++;
                    while(left < right && nums[right] == nums[right - 1]) right --;
                    left ++;
                    right --;
                }
            }
        }
        return result;
    }    
}
// 双指针 Time: O(N ^ 2) Space: O(1)
